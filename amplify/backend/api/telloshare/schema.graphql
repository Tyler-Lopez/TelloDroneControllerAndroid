type Challenge @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  ChallengeTelloFlight: [TelloFlight] @hasMany(indexName: "byChallenge", fields: ["id"])
}

type TelloFlight @model @auth(rules: [{allow: private, operations: [create, read]}, {allow: owner}]) {
  id: ID!
  startedMs: AWSTimestamp!
  lengthMs: Int
  TelloFlightTelloFlightData: [TelloFlightData] @hasMany(indexName: "byTelloFlightAndTimeSinceStartMs", fields: ["id"])
  challengeID: ID! @index(name: "byChallenge")
  owner: String! @index(name: "byOwnerAndStartedMs", sortKeyFields: ["startedMs"], queryField: "telloFlightByOwnerAndStartedMs")
  successfulLand: Boolean 
}

type TelloFlightData @model @auth(rules: [{allow: private, operations: [create, read]}, {allow: owner}]) {
  id: ID!
  timeSinceStartMs: Int!
  telloflightID: ID! @index(name: "byTelloFlightAndTimeSinceStartMs", sortKeyFields: ["timeSinceStartMs"], queryField: "telloFlightDataByTelloFlightIdAndTimeSinceStartMs")
  mpry: Int
  pitch: Int
  roll: Int
  yaw: Int
  vgx: Int
  vgy: Int
  vgz: Int
  templ: Int
  temph: Int
  tof: Int
  h: Int
  bat: Int
  baro: Float
  time: Int
  agx: Int
  agy: Int
  agz: Int
}
 